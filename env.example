# ===========================================
# AI Web Automation Agent - Environment Configuration
# ===========================================

# Database Configuration (Docker PostgreSQL)
DATABASE_URL="postgresql://automation_user:automation_password_2024@localhost:5432/ai_automation"
DB_HOST=localhost
DB_PORT=5432
DB_NAME=ai_automation
DB_USER=automation_user
DB_PASSWORD=automation_password_2024

# Redis Configuration (Docker Redis)
REDIS_URL="redis://:redis_password_2024@localhost:6379"
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=redis_password_2024

# OpenAI Configuration
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=1500
OPENAI_TEMPERATURE=0.2

# Worker Configuration
WORKER_URL=http://localhost:8000
WORKER_TIMEOUT=60
WORKER_MAX_RETRIES=3

# Security
JWT_SECRET=your-super-secret-jwt-key-here-change-in-production
ENCRYPT_KEY=your-32-character-encryption-key

# Logging
LOG_LEVEL=info
LOG_FILE=./logs/automation.log

# Resource Limits
MAX_CONCURRENT_JOBS=3
MAX_SCREENSHOTS_PER_TASK=5
SCREENSHOT_RETENTION_DAYS=7
TEMP_DIR=./temp

# Development Settings
NODE_ENV=development
DEBUG=true

# Next.js Configuration
NEXT_PUBLIC_API_URL=http://localhost:3000
NEXTAUTH_SECRET=your_nextauth_secret_here
NEXTAUTH_URL=http://localhost:3000

# Queue Configuration
QUEUE_CONCURRENCY=2
QUEUE_MAX_ATTEMPTS=3
QUEUE_TIMEOUT=60

# Security Configuration
CORS_ORIGINS=http://localhost:3000,http://localhost:8000

# Development Configuration
VERBOSE_LOGGING=false

# ===========================================
# Docker Configuration Examples
# ===========================================

# For Docker Compose Production:
# Override these in docker-compose.prod.yml or .env.prod

# Production Database (External PostgreSQL)
# DATABASE_URL="postgresql://prod_user:secure_password@postgres.example.com:5432/ai_automation_prod"
# DB_HOST=postgres.example.com
# DB_PASSWORD=secure_production_password
# DB_USER=prod_user
# DB_NAME=ai_automation_prod

# Production Redis (External Redis)
# REDIS_URL="redis://:secure_redis_pass@redis.example.com:6379"
# REDIS_HOST=redis.example.com
# REDIS_PASSWORD=secure_redis_password

# Production Security
# JWT_SECRET=your-super-strong-64-character-jwt-secret-for-production-use
# ENCRYPT_KEY=your-super-strong-32-character-encryption-key
# NEXTAUTH_SECRET=your-strong-nextauth-secret-for-production

# Production URLs
# NEXT_PUBLIC_API_URL=https://your-domain.com
# NEXTAUTH_URL=https://your-domain.com
# WORKER_URL=https://worker.your-domain.com

# Production Limits
# MAX_CONCURRENT_JOBS=10
# QUEUE_CONCURRENCY=5
# MAX_SCREENSHOTS_PER_TASK=10

# SSL/TLS Configuration
# DATABASE_SSL=true
# REDIS_TLS=true
# FORCE_HTTPS=true

# ===========================================
# Docker Compose Environment Variables
# ===========================================

# These are used by docker-compose.yml
# Uncomment and set in .env file for custom values

# Database Container Settings
# POSTGRES_DB=ai_automation
# POSTGRES_USER=automation_user  
# POSTGRES_PASSWORD=automation_password_2024

# Redis Container Settings
# REDIS_PASSWORD=redis_password_2024

# PgAdmin Container Settings
# PGADMIN_DEFAULT_EMAIL=admin@automation.com
# PGADMIN_DEFAULT_PASSWORD=admin_password_2024

# Redis Commander Settings
# REDIS_UI_PASSWORD=redis_ui_password_2024

# ===========================================
# Production Configuration Notes
# ===========================================

# 1. Security Checklist:
#    ✅ Change all default passwords
#    ✅ Use environment-specific secrets
#    ✅ Enable SSL/TLS for all connections
#    ✅ Restrict CORS origins
#    ✅ Use strong JWT secrets (64+ chars)
#    ✅ Enable database SSL
#    ✅ Use Docker secrets for sensitive data

# 2. Performance Optimization:
#    ✅ Increase memory limits for containers
#    ✅ Configure PostgreSQL connection pooling
#    ✅ Set appropriate Redis memory limits
#    ✅ Use Redis clustering for scale
#    ✅ Enable database query optimization

# 3. Monitoring & Logging:
#    ✅ Configure centralized logging
#    ✅ Set up health check endpoints
#    ✅ Enable metrics collection
#    ✅ Configure alerting for failures
#    ✅ Use log aggregation (ELK/Grafana)

# 4. Backup & Recovery:
#    ✅ Configure automated database backups
#    ✅ Set up Redis persistence
#    ✅ Test backup restoration procedures
#    ✅ Document recovery processes

# 5. Scalability:
#    ✅ Use load balancers for multiple instances
#    ✅ Configure read replicas for databases
#    ✅ Implement Redis clustering
#    ✅ Use container orchestration (Kubernetes)

# =========================================== 