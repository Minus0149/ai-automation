version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-automation-postgres
    environment:
      POSTGRES_DB: ai_automation_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue Processor (uses Upstash Redis)
  queue:
    build:
      context: ..
      dockerfile: docker/Dockerfile.queue
    container_name: ai-automation-queue
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:password@postgres:5432/ai_automation_db
      UPSTASH_REDIS_REST_URL: ${UPSTASH_REDIS_REST_URL}
      UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN}
      UPSTASH_REDIS_URL: ${UPSTASH_REDIS_URL}
      WORKER_URL: http://worker:8000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      worker:
        condition: service_healthy
    restart: unless-stopped

  # Python Worker
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    container_name: ai-automation-worker
    environment:
      PORT: 8000
      HOST: 0.0.0.0
    ports:
      - "8000:8000"
    volumes:
      - /tmp:/tmp
      - worker_screenshots:/tmp/screenshots
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend with API (uses Upstash Redis)
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: ai-automation-frontend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:password@postgres:5432/ai_automation_db
      UPSTASH_REDIS_REST_URL: ${UPSTASH_REDIS_REST_URL}
      UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN}
      UPSTASH_REDIS_URL: ${UPSTASH_REDIS_URL}
      WORKER_URL: http://worker:8000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      worker:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  worker_screenshots:

networks:
  default:
    name: ai-automation-network
