version: "3.8"

# ===========================================
# AI Web Automation Agent - Production Configuration
# ===========================================

services:
  # ===========================================
  # PostgreSQL Database Service (Production)
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: ai-automation-postgres-prod
    environment:
      # Production Database Configuration
      POSTGRES_DB: ${DB_NAME:-ai_automation_prod}
      POSTGRES_USER: ${DB_USER:-automation_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

      # Security Settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"

      # Performance Settings
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: "0.9"
      POSTGRES_WAL_BUFFERS: "16MB"
      POSTGRES_DEFAULT_STATISTICS_TARGET: "100"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgres-prod.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-automation_user} -d ${DB_NAME:-ai_automation_prod}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - automation-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Redis Cache & Queue Service (Production)
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: ai-automation-redis-prod
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      # Production Redis Configuration
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_MAXMEMORY: ${REDIS_MAXMEMORY:-2gb}
      REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
      - ./docker/redis-prod.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - automation-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Queue Processor Service (Production)
  # ===========================================
  queue-processor:
    build:
      context: ./queue
      dockerfile: Dockerfile.prod
    container_name: ai-automation-queue-prod
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://${DB_USER:-automation_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-ai_automation_prod}?sslmode=require"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-ai_automation_prod}
      DB_USER: ${DB_USER:-automation_user}
      DB_PASSWORD: ${DB_PASSWORD}

      # Redis Configuration
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}

      # Worker Configuration
      WORKER_URL: ${WORKER_URL:-http://worker:8000}

      # Production Settings
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      QUEUE_CONCURRENCY: ${QUEUE_CONCURRENCY:-5}
      MAX_CONCURRENT_JOBS: ${MAX_CONCURRENT_JOBS:-10}
    ports:
      - "${QUEUE_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - automation-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Python Worker Service (Production)
  # ===========================================
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.prod
    container_name: ai-automation-worker-prod
    environment:
      # Worker Configuration
      HOST: 0.0.0.0
      PORT: 8000
      WORKER_TIMEOUT: ${WORKER_TIMEOUT:-120}

      # Selenium Configuration
      HEADLESS: true
      CHROME_DRIVER_PATH: /usr/local/bin/chromedriver

      # Production Settings
      PYTHON_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      MAX_EXECUTION_TIME: ${MAX_EXECUTION_TIME:-300}
    ports:
      - "${WORKER_PORT:-8000}:8000"
    volumes:
      - worker_screenshots_prod:/app/screenshots
      - worker_logs_prod:/app/logs
    restart: unless-stopped
    networks:
      - automation-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Frontend Service (Production)
  # ===========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: ai-automation-frontend-prod
    environment:
      # Frontend Configuration
      NEXT_PUBLIC_API_URL: ${FRONTEND_API_URL:-https://api.yourdomain.com}
      NEXTAUTH_URL: ${FRONTEND_URL:-https://yourdomain.com}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}

      # Database Configuration (for API routes)
      DATABASE_URL: "postgresql://${DB_USER:-automation_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-ai_automation_prod}?sslmode=require"

      # Production Settings
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      queue-processor:
        condition: service_started
    restart: unless-stopped
    networks:
      - automation-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Nginx Reverse Proxy (Production)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: ai-automation-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - queue-processor
    restart: unless-stopped
    networks:
      - automation-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ===========================================
# Production Data Volumes
# ===========================================
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  worker_screenshots_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/screenshots
  worker_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/logs

# ===========================================
# Production Network Configuration
# ===========================================
networks:
  automation-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
# ===========================================
# Production Environment Variables Required
# ===========================================
#
# Create .env.prod file with these variables:
#
# # Database Configuration
# DB_PASSWORD=your_secure_production_password
# DB_USER=prod_automation_user
# DB_NAME=ai_automation_prod
#
# # Redis Configuration
# REDIS_PASSWORD=your_secure_redis_password
# REDIS_MAXMEMORY=2gb
#
# # OpenAI Configuration
# OPENAI_API_KEY=sk-your-production-openai-key
#
# # Security Configuration
# NEXTAUTH_SECRET=your-super-secure-nextauth-secret-64-chars-minimum
# JWT_SECRET=your-super-secure-jwt-secret-64-chars-minimum
#
# # URLs and Domains
# FRONTEND_URL=https://yourdomain.com
# FRONTEND_API_URL=https://api.yourdomain.com
# WORKER_URL=https://worker.yourdomain.com
#
# # Performance Configuration
# QUEUE_CONCURRENCY=5
# MAX_CONCURRENT_JOBS=10
# WORKER_TIMEOUT=120
#
# # Data Storage
# DATA_DIR=/opt/ai-automation-data
#
# # SSL Configuration (if using HTTPS)
# SSL_CERT_PATH=/etc/ssl/certs/yourdomain.crt
# SSL_KEY_PATH=/etc/ssl/private/yourdomain.key
#
# ===========================================
